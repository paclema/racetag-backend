# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-10-18T17:01:42+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class EventType(Enum):
    arrive = 'arrive'
    depart = 'depart'


class TagEventDTO(BaseModel):
    source: str = Field(..., example='sirit-510')
    reader_ip: str
    reader_serial: str
    timestamp: str = Field(
        ...,
        description='ISO8601 with milliseconds and Z',
        example='2025-10-16T11:53:32.298Z',
    )
    event_type: EventType
    tag_id: str = Field(..., description='Uppercase hex without 0x')
    session_id: Optional[int] = None
    antenna: Optional[int] = None
    rssi: Optional[int] = None
    first: Optional[str] = None
    last: Optional[str] = None


class TagEventBatchDTO(BaseModel):
    events: List[TagEventDTO]


class BatchIngestResultDTO(BaseModel):
    events_processed: int


class ParticipantDTO(BaseModel):
    tag_id: str
    laps: int
    last_pass_time: Optional[str] = None
    finish_time: Optional[str] = None
    finished: bool
    total_time_ms: Optional[int] = None
    gap_ms: Optional[int] = Field(
        None,
        description='Time gap to the leader in milliseconds when on the same lap (0 for leader; null if lapped)',
    )
    laps_behind: Optional[int] = Field(
        None, description='Number of laps behind the leader (null or 0 if on same lap)'
    )


class ClassificationDTO(BaseModel):
    count: int
    standings: List[ParticipantDTO]


class RaceDTO(BaseModel):
    total_laps: int
    start_time: str
    participants: List[ParticipantDTO]
